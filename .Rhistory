devtools::document()
devtools::document()
library(FCMm)
devtools::document()
library(FCMm)
library(FCMm)
library(FCMm)
library(FCMm)
library(FCMm)
library(FCMm)
library(FCMm)
library(FCMm)
library(FCMm)
library(FCMm)
library(FCMm)
library(FCMm)
library(FCMm)
library(FCMm)
library(FCMm)
library(FCMm)
devtools::document()
devtools::document()
devtools::document()
library(FCMm)
library(FCMm)
??coord_trans
library(FCMm)
FBA_Yang10 = FBA_Yang10(Rrs665, Rrs709, Rrs754)$Chla
library(FCMm)
library(FCMm)
library(FCMm)
devtools::document()
devtools::document()
library(FCMm)
library(FCMm)
library(FCMm)
library(FCMm)
.cal.smape <- function(x,y){
return(mean(
abs(2*(y-x)/(x+mean(x)))
, na.rm=T)*100)
}
library(FCMm)
library(FCMm)
library(FCMm)
library(FCMm)
library(FCMm)
library(FCMm)
c(-2,-1) * 0.6
library(FCMm)
library(FCMm)
library(FCMm)
library(FCMm)
library(FCMm)
library(FCMm)
library(FCMm)
library(FCMm)
library(FCMm)
library(FCMm)
library(FCMm)
library(FCMm)
library(FCMm)
library(FCMm)
library(FCMm)
library(FCMm)
x = runfi(10)
x = runif(10)
x
is.vector(x)
is.numeric(x)
trim=0.05
stopifnot(is.vector(x) & is.numeric(x) & is.numeric(trim))
sd(c(1,2))
sd(c(1))
n_trim <- length(x) * trim
floor
ceiling(0.5)
ceiling(0.8)
ceiling(0.0001)
x_sort <- sort(x)
x_sort
x_new <- x_sort[head:tail]
head = n_trim + 1
tail = length(x) - n_trim
x_new <- x_sort[head:tail]
x_new
head
tail
x = runif(10)
stopifnot(is.vector(x) & is.numeric(x) & is.numeric(trim))
n_trim <- ceiling(length(x) * trim)
head = n_trim + 1
tail = length(x) - n_trim
x_sort <- sort(x)
x_sort
x_new <- x_sort[head:tail]
x_new
x <- c(runif(10), NA)
x
x <- na.omit(x)
x
x <- as.numeric(na.omit(x))
x <- c(runif(10), NA)
x <- as.numeric(na.omit(x))
x
n_trim <- ceiling(length(x) * trim)
head = n_trim + 1
tail = length(x) - n_trim
x_sort <- sort(x)
x_new <- x_sort[head:tail]
if(length(x_new) <= 1)
stop("Short length of input x, cannot be trimmed!")
sd(x_new)
sd(x)
devtools::document()
library(FCMm)
library(FCMm)
library(FCMm)
library(FCMm)
sd(c(-1,2,3,4))
library(FCMm)
library(FCMm)
library(FCMm)
library(FCMm)
library(FCMm)
x = runif(10)
x
?sort
x_ind <- sort.ind(x, decreasing=decreasing)
x_ind <- sort.int(x, decreasing=decreasing)
decreasing = TRUE
x_ind <- sort.int(x, decreasing=decreasing)
x_ind <- sort.int(x, decreasing=decreasing, index.return = TRUE)
x_ind$ix
score
score <- sort.int(x, decreasing=decreasing, index.return = TRUE)$ix
score
x <- as.numeric(x)
x_indx
x
score
decreasing = FALSE
x <- as.numeric(x)
score <- sort.int(x, decreasing=decreasing, index.return = TRUE)$ix
score
x
sort.int(c(runif(3),NA), decreasing=decreasing, index.return = TRUE)$ix
if(decreasing){
na.last = TRUE
}else{
na.last = FALSE
}
sort.int(c(runif(3),NA), decreasing=decreasing, index.return = TRUE)$ix
sort.int(c(runif(3),NA), decreasing=decreasing, index.return = TRUE, na.last = na.last)$ix
sort.int(x, decreasing=decreasing, index.return = TRUE, na.last = na.last)$ix
x = c(runif(2),NA)
sort.int(x, decreasing=decreasing, index.return = TRUE, na.last = na.last)$ix
x
decreasing = TRUE
if(decreasing){
na.last = TRUE
}else{
na.last = FALSE
}
sort.int(x, decreasing=decreasing, index.return = TRUE, na.last = na.last)$ix
x
Score_algorithms_sort <- function(x, decreasing = FALSE){
x <- as.numeric(x)
if(decreasing){
na.last = TRUE
}else{
na.last = FALSE
}
score <- sort.int(x, decreasing=decreasing, index.return = TRUE, na.last = na.last)$ix
score
}
decreasing = FALSE
if(decreasing){
na.last = TRUE
}else{
na.last = FALSE
}
sort.int(x, decreasing=decreasing, index.return = TRUE, na.last = na.last)$ix
x
213
sort.int(c(0.1,NA,0.2), decreasing=decreasing, index.return = TRUE, na.last = na.last)$ix
sort.int(c(0.1,NA,0.2), decreasing=FALSE, index.return = TRUE, na.last = na.last)$ix
sort.int(c(0.1,NA,0.2), decreasing=TRUE, index.return = TRUE, na.last = na.last)$ix
sort.int(c(0.1,NA,0.2), decreasing=TRUE, index.return = TRUE, na.last = FALSE)$ix
sort.int(c(0.1,NA,0.2), decreasing=FALSE, index.return = TRUE, na.last = FALSE)$ix
sort.int(c(0.1,NA,0.2), decreasing=TRUE, index.return = TRUE, na.last = FALSE)$ix
sort.int(c(0.1,NA,0.2), decreasing=TRUE, index.return = TRUE, na.last = TRUE)$ix
sort.int(c(0.1,NA,0.2), decreasing=TRUE, index.return = TRUE, na.last = TRUE)
sort.int(c(0.1,0.3,0.4,NA))
sort.int(c(0.1,0.3,0.4,NA), decreasing = TRUE)
sort.int(c(0.1,0.3,0.4,NA), decreasing = TRUE, na.last=FALSE)
sort.int(c(0.1,0.3,0.4,NA), decreasing = TRUE, na.last=FALSE, index.return=T)
Score_algorithms_sort <- function(x, decreasing = TRUE){
x <- as.numeric(x)
# decreasing == TRUE for smaller metrics that are better
if(decreasing == TRUE){
na.last = FALSE
}else{
na.last = TRUE
}
score <- sort.int(x, decreasing=decreasing, index.return = TRUE, na.last = na.last)$ix
return(score)
}
Score_algorithms_sort(c(0.1,0.3,0.2,NA))
w = which(is.na(x) == TRUE)
score[w] = 0
score
Score_algorithms_sort <- function(x, decreasing = TRUE){
x <- as.numeric(x)
# decreasing == TRUE for smaller metrics that are better
if(decreasing == TRUE){
na.last = FALSE
}else{
na.last = TRUE
}
score <- sort.int(x, decreasing=decreasing, index.return = TRUE, na.last = na.last)$ix
w = which(is.na(x) == TRUE)
score[w] = 0
return(score)
}
Score_algorithms_sort(c(runfi(5),NA))
Score_algorithms_sort(c(runif(5),NA))
x = c(runif(5),NA)
x
Score_algorithms_sort(x)
x %>% round(2)
round(x,2)
Score_algorithms_sort(x)
round(x,2)[Score_algorithms_sort(x)]
Score_algorithms_sort(x) ->a
a
x[a[1]]
a[1]
Score_algorithms_sort(c(1,5,3,4))
sort.int(c(1,5,3,4), index.return = T)
w = sort.int(c(1,5,3,4), index.return = T)$ix
c(1,5,3,4)[w]
score_save = seq(length(x))
score_save
x
# decreasing == TRUE for smaller metrics that are better
if(decreasing == TRUE){
na.last = FALSE
}else{
na.last = TRUE
}
score <- sort.int(x, decreasing=decreasing, index.return = TRUE, na.last = na.last)$ix
score
score_save[score]
sort.int(c(3,1,2), index.return=T)
sort.int(c(3.5,1.5,2.5), index.return=T)
r = sort.int(c(3.5,1.5,2.5), index.return=T)
x = c(3.5,1.5,2.5)
for(i in 1:length(x)){which(x[i] == r$x)}
for(i in 1:length(x)){print(which(x[i] == r$x))}
x
x <- as.numeric(x)
x <- as.numeric(x)
# decreasing == TRUE for smaller metrics that are better
if(decreasing == TRUE){
na.last = FALSE
}else{
na.last = TRUE
}
r <- sort.int(x, decreasing=decreasing, index.return = TRUE, na.last = na.last)
score <- NULL
for(i in 1:length(x)){
score[i] = which(x[i] == r$x)
}
score
w = which(is.na(x) == TRUE)
score[w] = 0
x
score
decreasing = TRUE
x <- as.numeric(x)
# decreasing == TRUE for smaller metrics that are better
if(decreasing == TRUE){
na.last = FALSE
}else{
na.last = TRUE
}
r <- sort.int(x, decreasing=decreasing, index.return = TRUE, na.last = na.last)
score <- NULL
for(i in 1:length(x)){
score[i] = which(x[i] == r$x)
}
w = which(is.na(x) == TRUE)
score[w] = 0
x
score
x <- as.numeric(x)
Score_algorithms_sort <- function(x, decreasing = TRUE){
x <- as.numeric(x)
# decreasing == TRUE for smaller metrics that are better
if(decreasing == TRUE){
na.last = FALSE
}else{
na.last = TRUE
}
r <- sort.int(x, decreasing=decreasing, index.return = TRUE, na.last = na.last)
score <- NULL
for(i in 1:length(x)){
score[i] = which(x[i] == r$x)
}
w = which(is.na(x) == TRUE)
score[w] = 0
return(score)
}
x = c(3.5, 1.5, 2.5, NA, 5)
Score_algorithms_sort(x)
x <- as.numeric(x)
x
# decreasing == TRUE for smaller metrics that are better
if(decreasing == TRUE){
na.last = FALSE
}else{
na.last = TRUE
}
na.last
decreasing
r <- sort.int(x, decreasing=decreasing, index.return = TRUE, na.last = na.last)
r
score <- NULL
for(i in 1:length(x)){
score[i] = which(x[i] == r$x)
}
x[i]
is.na(x[i])
score <- NULL
for(i in 1:length(x)){
if(is.na(x[i])){
score[i] = 0
}else{
score[i] = which(x[i] == r$x)
}
}
score
Score_algorithms_sort <- function(x, decreasing = TRUE){
x <- as.numeric(x)
# decreasing == TRUE for smaller metrics that are better
if(decreasing == TRUE){
na.last = FALSE
}else{
na.last = TRUE
}
r <- sort.int(x, decreasing=decreasing, index.return = TRUE, na.last = na.last)
score <- NULL
for(i in 1:length(x)){
if(is.na(x[i])){
score[i] = 0
}else{
score[i] = which(x[i] == r$x)
}
}
return(score)
}
Score_algorithms_sort(x)
library(FCMm)
library(FCMm)
devtools::document()
library(FCMm)
match.arg('sort',c('sort-based','interval-based'))
devtools::document()
library(FCMm)
library(FCMm)
knitr::opts_chunk$set(collapse = TRUE, comment = "#>",
fig.align='center')
rm(list=ls())
library(FCMm)
library(tidyverse)
data("WaterSpec35")
data("Bi_clusters")
Rrs <- WaterSpec35[,3:17]
qplot(data=WaterSpec35, x=Chla, geom='density', xlab='The raw Chla')
qplot(data=WaterSpec35, x=Chla, geom='density', log='x', xlab='Log10 transformed Chla')
p.spec <- plot_spec_from_df(Rrs) +
labs(x='Wavelength (nm)',y=expression(Rrs~(sr^-1))) +
theme_bw() +
theme(legend.position='none', text=element_text(size=18))
print(p.spec)
result <- apply_FCM_m(Rrs=Rrs, option.plot=TRUE)
summary(result)
result$p.group
dt_Chla <- FCM_m_Chla_estimation(Rrs=data.frame(Rrs665=Rrs$`665`,
Rrs709=Rrs$`708.75`,
Rrs754=Rrs$`753.75`),
U=result$u)
dt_Chla$cluster <- result$cluster %>% as.character
dt_Chla$Chla_true <- WaterSpec35$Chla
View(dt_Chla)
options(scipen=10000)
subset(dt_Chla, select=c('cluster','Chla_true','BR','TBA','C6','conc.Blend')) %>%
reshape2::melt(., id=c('cluster','Chla_true')) %>%
ggplot(data=.) +
geom_point(aes(x=Chla_true,y=value,group=cluster,color=cluster),
alpha=0.8, size=4) +
scale_x_log10(limits=c(1,800)) +
scale_y_log10(limits=c(1,800)) +
scale_color_manual(values=heatmaply::RdYlBu(result$K)) +
labs(x='True value of Chla concentration (ug/L)',
y='Estimated value of Chla concentration (ug/L)',
color='Cluster') +
geom_abline(intercept=0, slope=1, linetype=2) +
facet_wrap(~variable, nrow=2) +
theme_bw() +
theme(axis.text.x.bottom = element_text(hjust=1))
subset(dt_Chla, select=c('cluster','Chla_true','BR','TBA','Bloom','conc.Blend')) %>%
reshape2::melt(., id=c('cluster','Chla_true')) %>%
ggplot(data=.) +
geom_point(aes(x=Chla_true,y=value,group=cluster,color=cluster),
alpha=0.8, size=4) +
scale_x_log10(limits=c(1,800)) +
scale_y_log10(limits=c(1,800)) +
scale_color_manual(values=heatmaply::RdYlBu(result$K)) +
labs(x='True value of Chla concentration (ug/L)',
y='Estimated value of Chla concentration (ug/L)',
color='Cluster') +
geom_abline(intercept=0, slope=1, linetype=2) +
facet_wrap(~variable, nrow=2) +
theme_bw() +
theme(axis.text.x.bottom = element_text(hjust=1))
MAPEs <- NULL
i <- 1
for(model in c('BR','TBA','C6','conc.Blend')){
MAPEs[i] <- cal.metrics(x=dt_Chla$Chla_true %>% log10,
y=dt_Chla[,model]  %>% log10,
name='MAPE',log10=TRUE)
names(MAPEs)[i] <- model
i <- i + 1
}
knitr::opts_chunk$set(collapse = TRUE, comment = "#>",
fig.align='center')
rm(list=ls())
library(FCMm)
library(tidyverse)
data("WaterSpec35")
data("Bi_clusters")
Rrs <- WaterSpec35[,3:17]
qplot(data=WaterSpec35, x=Chla, geom='density', xlab='The raw Chla')
qplot(data=WaterSpec35, x=Chla, geom='density', log='x', xlab='Log10 transformed Chla')
p.spec <- plot_spec_from_df(Rrs) +
labs(x='Wavelength (nm)',y=expression(Rrs~(sr^-1))) +
theme_bw() +
theme(legend.position='none', text=element_text(size=18))
print(p.spec)
result <- apply_FCM_m(Rrs=Rrs, option.plot=TRUE)
summary(result)
result$p.group
dt_Chla <- FCM_m_Chla_estimation(Rrs=data.frame(Rrs665=Rrs$`665`,
Rrs709=Rrs$`708.75`,
Rrs754=Rrs$`753.75`),
U=result$u)
dt_Chla$cluster <- result$cluster %>% as.character
dt_Chla$Chla_true <- WaterSpec35$Chla
options(scipen=10000)
subset(dt_Chla, select=c('cluster','Chla_true','BR','TBA','Bloom','conc.Blend')) %>%
reshape2::melt(., id=c('cluster','Chla_true')) %>%
ggplot(data=.) +
geom_point(aes(x=Chla_true,y=value,group=cluster,color=cluster),
alpha=0.8, size=4) +
scale_x_log10(limits=c(1,800)) +
scale_y_log10(limits=c(1,800)) +
scale_color_manual(values=heatmaply::RdYlBu(result$K)) +
labs(x='True value of Chla concentration (ug/L)',
y='Estimated value of Chla concentration (ug/L)',
color='Cluster') +
geom_abline(intercept=0, slope=1, linetype=2) +
facet_wrap(~variable, nrow=2) +
theme_bw() +
theme(axis.text.x.bottom = element_text(hjust=1))
MAPEs <- NULL
i <- 1
for(model in c('BR','TBA','Bloom','conc.Blend')){
MAPEs[i] <- cal.metrics(x=dt_Chla$Chla_true %>% log10,
y=dt_Chla[,model]  %>% log10,
name='MAPE',log10=TRUE)
names(MAPEs)[i] <- model
i <- i + 1
}
print(MAPEs)
MAEs <- NULL
i <- 1
for(model in c('BR','TBA','Bloom','conc.Blend')){
MAEs[i] <- cal.metrics(x=dt_Chla$Chla_true,
y=dt_Chla[,model],
name='MAE',log10=TRUE)
names(MAEs)[i] <- model
i <- i + 1
}
print(MAEs)
Rrs_sub <- subset(Rrs, select=c(`412.5`,`442.5`,`490`,`510`,
`560`,`620`,`665`,`673.75`,
`708.75`,`753.75`,`865`,`885`))
wavelength.sub <- c(412.5,442.5,490,510,
560,620,665,673.75,
708.75,753.75,865,885)
Rrs_clusters.sub <- which(names(Rrs_clusters.default) != 'X400' &
names(Rrs_clusters.default) != 'X681' &
names(Rrs_clusters.default) != 'X779') %>%
Rrs_clusters.default[,.]
# Note the parameter settings in this function `default.cluster=F`
result_sub <- apply_FCM_m(Rrs=Rrs_sub, wavelength=wavelength.sub,
Rrs_clusters=Rrs_clusters.sub,
stand=F, default.cluster=F, option.plot=T)
result_sub$p.group
devtools::document()

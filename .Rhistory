which(model_names == model)]
all.metrics[[metric]]
x <- meas[cluster_crisp %in% cluster] # true
y <- pred[cluster_crisp %in% cluster, model] # pred
all.metrics <- cal.metrics(x,y,'all')
x
y
all.metrics[[metric]]
metric
for(metric in names(result)){
result[[metric]][which(cluster_names == cluster),
which(model_names == model)] <- all.metrics[[metric]]
}
# output is a list
result <- list()
for(i in 1:length(metrics))
result[[metrics[i]]] <- validation
# strat loop via model and cluster
for(model in model_names){
for(cluster in cluster_names){
x <- meas[cluster_crisp %in% cluster] # true
y <- pred[cluster_crisp %in% cluster, model] # pred
all.metrics <- cal.metrics(x,y,'all')
for(metric in names(result)){
result[[metric]][which(cluster_names == cluster),
which(model_names == model)] <- all.metrics[[metric]]
}
}
}
result <- list()
for(i in 1:length(metrics))
result[[metrics[i]]] <- validation
# strat loop via model and cluster
for(model in model_names){
for(cluster in cluster_names){
x <- meas[cluster_crisp %in% cluster] # true
y <- pred[cluster_crisp %in% cluster, model] # pred
for(metric in names(result)){
result[[metric]][which(cluster_names == cluster),
which(model_names == model)] <- cal.metrics(x,y,metric)
}
}
}
View(result)
View(result[["MAE2"]])
View(result[["MAPE"]])
metric
result[[metric]] %<>% rbind(.,NA)
View(result[["MAPE"]])
rownames(result[[metric]])[nrow(result[[metric]])]
rownames(result[[metric]])[nrow(result[[metric]])] <- 'SUM'
View(result[["MAPE"]])
x <- meas
y <- pred[, model]
x
y
result[[metric]]['SUM',
which(model_names == model)]
result[[metric]]['SUM',
which(model_names == model)] <- cal.metrics(x,y,metric)
View(result)
View(result[["MAPE"]])
# output is a list
result <- list()
for(i in 1:length(metrics))
result[[metrics[i]]] <- validation
# strat loop via model and cluster
for(model in model_names){
for(cluster in cluster_names){
x <- meas[cluster_crisp %in% cluster] # true
y <- pred[cluster_crisp %in% cluster, model] # pred
for(metric in names(result)){
result[[metric]][which(cluster_names == cluster),
which(model_names == model)] <- cal.metrics(x,y,metric)
}
}
if(total == TRUE){
x <- meas
y <- pred[, model]
for(metric in names(result)){
result[[metric]] %<>% rbind(.,NA)
rownames(result[[metric]])[nrow(result[[metric]])] <- 'SUM'
result[[metric]]['SUM',
which(model_names == model)] <- cal.metrics(x,y,metric)
}
}
}
total = TRUE
# output is a list
result <- list()
for(i in 1:length(metrics))
result[[metrics[i]]] <- validation
# strat loop via model and cluster
for(model in model_names){
for(cluster in cluster_names){
x <- meas[cluster_crisp %in% cluster] # true
y <- pred[cluster_crisp %in% cluster, model] # pred
for(metric in names(result)){
result[[metric]][which(cluster_names == cluster),
which(model_names == model)] <- cal.metrics(x,y,metric)
}
}
if(total == TRUE){
x <- meas
y <- pred[, model]
for(metric in names(result)){
result[[metric]] %<>% rbind(.,NA)
rownames(result[[metric]])[nrow(result[[metric]])] <- 'SUM'
result[[metric]]['SUM',
which(model_names == model)] <- cal.metrics(x,y,metric)
}
}
}
cluster
model
model_names
View(result)
View(result[["MAE2"]])
# generate the output dataframe
model_names <- colnames(pred)
cluster_names <- colnames(memb)
cluster_crisp <- apply(memb,1,which.max) %>% sprintf('M%s',.)
validation <- matrix(data=0,
nrow=length(cluster_names),
ncol=length(model_names)) %>% as.data.frame()
colnames(validation) <- model_names
rownames(validation) <- cluster_names
# output is a list
result <- list()
for(i in 1:length(metrics))
result[[metrics[i]]] <- validation
model
for(cluster in cluster_names){
x <- meas[cluster_crisp %in% cluster] # true
y <- pred[cluster_crisp %in% cluster, model] # pred
for(metric in names(result)){
result[[metric]][which(cluster_names == cluster),
which(model_names == model)] <- cal.metrics(x,y,metric)
}
}
View(result)
View(result[["MAE2"]])
if(total == TRUE){
x <- meas
y <- pred[, model]
for(metric in names(result)){
result[[metric]] %<>% rbind(.,NA)
rownames(result[[metric]])[nrow(result[[metric]])] <- 'SUM'
result[[metric]]['SUM',
which(model_names == model)] <- cal.metrics(x,y,metric)
}
}
View(result[["MAE2"]])
View(result[["MAPE"]])
model_names
model='Chla_OC4'
for(cluster in cluster_names){
x <- meas[cluster_crisp %in% cluster] # true
y <- pred[cluster_crisp %in% cluster, model] # pred
for(metric in names(result)){
result[[metric]][which(cluster_names == cluster),
which(model_names == model)] <- cal.metrics(x,y,metric)
}
}
View(result[["MAE2"]])
View(result[["MAPE"]])
# output is a list
result <- list()
for(i in 1:length(metrics))
result[[metrics[i]]] <- validation
# strat loop via model and cluster
for(model in model_names){
for(cluster in cluster_names){
x <- meas[cluster_crisp %in% cluster] # true
y <- pred[cluster_crisp %in% cluster, model] # pred
for(metric in names(result)){
result[[metric]][which(cluster_names == cluster),
which(model_names == model)] <- cal.metrics(x,y,metric)
}
}
if(total == TRUE){
x <- meas
y <- pred[, model]
for(metric in names(result)){
if(rownames(result[[metric]])[nrow(result[[metric]])] != 'SUM'){
result[[metric]] %<>% rbind(.,NA)
rownames(result[[metric]])[nrow(result[[metric]])] <- 'SUM'
}
result[[metric]]['SUM',
which(model_names == model)] <- cal.metrics(x,y,metric)
}
}
}
View(result)
View(result[["MAE2"]])
View(result[["MAPE"]])
#' @title Assessment each algorithm for every cluster
#' @name Assessment_via_cluster
#' @param Chla_pred prediciton of Chla
#' @param Chla_meas in-situ measurement of Chla
#' @param memb membership value matrix
#' @param metrics metrics need to be calculated
#' @export
#' @return List
Assessment_via_cluster <- function(pred, meas, memb,
metrics = c('MAE2','MAPE'),
total = TRUE,
hard.mode= TRUE){
if(nrow(pred) != length(meas) | nrow(pred) != nrow(memb))
stop('Rows of input are different!')
if(anyNA(pred) | anyNA(meas) | anyNA(memb))
stop('Including NA values!')
for(i in 1:length(metrics))
metrics[i] <- match.arg(metrics[i], cal.metrics.names())
# generate the output dataframe
model_names <- colnames(pred)
cluster_names <- colnames(memb)
cluster_crisp <- apply(memb,1,which.max) %>% sprintf('M%s',.)
validation <- matrix(data=0,
nrow=length(cluster_names),
ncol=length(model_names)) %>% as.data.frame()
colnames(validation) <- model_names
rownames(validation) <- cluster_names
# output is a list
result <- list()
for(i in 1:length(metrics))
result[[metrics[i]]] <- validation
# strat loop via model and cluster
for(model in model_names){
for(cluster in cluster_names){
x <- meas[cluster_crisp %in% cluster] # true
y <- pred[cluster_crisp %in% cluster, model] # pred
for(metric in names(result)){
result[[metric]][which(cluster_names == cluster),
which(model_names == model)] <- cal.metrics(x,y,metric)
}
}
if(total == TRUE){
x <- meas
y <- pred[, model]
for(metric in names(result)){
if(rownames(result[[metric]])[nrow(result[[metric]])] != 'SUM'){
result[[metric]] %<>% rbind(.,NA)
rownames(result[[metric]])[nrow(result[[metric]])] <- 'SUM'
}
result[[metric]]['SUM',
which(model_names == model)] <- cal.metrics(x,y,metric)
}
}
}
}
#' @title Assessment each algorithm for every cluster
#' @name Assessment_via_cluster
#' @param Chla_pred prediciton of Chla
#' @param Chla_meas in-situ measurement of Chla
#' @param memb membership value matrix
#' @param metrics metrics need to be calculated
#' @export
#' @return List
Assessment_via_cluster <- function(pred, meas, memb,
metrics = c('MAE2','MAPE'),
total = TRUE,
hard.mode= TRUE){
if(nrow(pred) != length(meas) | nrow(pred) != nrow(memb))
stop('Rows of input are different!')
if(anyNA(pred) | anyNA(meas) | anyNA(memb))
stop('Including NA values!')
for(i in 1:length(metrics))
metrics[i] <- match.arg(metrics[i], cal.metrics.names())
# generate the output dataframe
model_names <- colnames(pred)
cluster_names <- colnames(memb)
cluster_crisp <- apply(memb,1,which.max) %>% sprintf('M%s',.)
validation <- matrix(data=0,
nrow=length(cluster_names),
ncol=length(model_names)) %>% as.data.frame()
colnames(validation) <- model_names
rownames(validation) <- cluster_names
# output is a list
result <- list()
for(i in 1:length(metrics))
result[[metrics[i]]] <- validation
# strat loop via model and cluster
for(model in model_names){
for(cluster in cluster_names){
x <- meas[cluster_crisp %in% cluster] # true
y <- pred[cluster_crisp %in% cluster, model] # pred
for(metric in names(result)){
result[[metric]][which(cluster_names == cluster),
which(model_names == model)] <- cal.metrics(x,y,metric)
}
}
if(total == TRUE){
x <- meas
y <- pred[, model]
for(metric in names(result)){
if(rownames(result[[metric]])[nrow(result[[metric]])] != 'SUM'){
result[[metric]] %<>% rbind(.,NA)
rownames(result[[metric]])[nrow(result[[metric]])] <- 'SUM'
}
result[[metric]]['SUM',
which(model_names == model)] <- cal.metrics(x,y,metric)
}
}
}
return(result)
}
cal.metrics.names()
Assessment_via_cluster(pred,meas,memb,metrics=c('MAE2','MAPE','BIAS2'))
document()
?Assessment_via_cluster
data.frame(result$res.FCM$u) %>% setNames(., sprintf("M%s",1:nb)) %>%
cbind(Nechad2015, .) -> dt
result
result <- FCM.new(FD, nb, fast.mode = T)
data.frame(result$res.FCM$u) %>% setNames(., sprintf("M%s",1:nb)) %>%
cbind(Nechad2015, .) -> dt
dt <- dt[{!is.na(dt$Chla)},]
dt$Chla_OC4 <- OC4_v6(Rrs443=dt$X442.5,Rrs490=dt$X490,
Rrs510=dt$X510,Rrs555=dt$X560)
dt$Chla_BR_Git11 <- BR_Gil10(Rrs709=dt$X708.75, Rrs665=dt$X665)
View(dt)
assessment <- Assessment_via_cluster(pred=dt[,c('Chla_OC4','Chla_BR_Git11')],
meas=dt$Chla,
memb=dt[,sprintf('M%s',1:nb)])
assessment
document()
document()
?C6
?C6
document()
?BR_Gil10
?BR_Gil10
document()
?BR_Gil10
names(x)
names(dt)
document()
data.frame(result$res.FCM$u) %>% setNames(., sprintf("M%s",1:nb)) %>%
cbind(Nechad2015, .) -> dt
dt <- dt[{!is.na(dt$Chla)},]
dt$Chla_OC4 <- OC4_v6(Rrs443=dt$X442.5,Rrs490=dt$X490,
Rrs510=dt$X510,Rrs555=dt$X560)
dt$Chla_BR_Git11 <- BR_Gil10(Rrs709=dt$X708.75, Rrs665=dt$X665)
assessment <- Assessment_via_cluster(pred=dt[,c('Chla_OC4','Chla_BR_Git11')],
meas=dt$Chla,
memb=dt[,sprintf('M%s',1:nb)])
assessment
devtools::install_github('bishun945/FCMm', build_vignettes=TRUE)
rm(list=ls())
library(FCMm)
library(tidyverse)
library(magrittr)
# load and clean data
data("Nechad2015")
Nechad2015 %<>% subset(., X620 < 0.1 & X412.5 > 1e-04)
names(Nechad2015)[12] <- 'Chla'
names(Nechad2015)[13] <- 'TSM'
Nechad2015$Chla[Nechad2015$Chla >= 999] <- NA
Nechad2015$TSM[Nechad2015$TSM >= 999] <- NA
w <- Nechad2015 %>% names %>%
str_extract(.,pattern="\\d") %>%
is.na %>% {!.}
wv <- w %>% names(Nechad2015)[.] %>%
gsub('X','',.) %>% as.numeric
x <- w %>% Nechad2015[,.]
names(x) <- wv
rm(w)
plot_spec_from_df(x) +
labs(x='Wavelength (nm)',y=expression(Rrs~(sr^-1))) +
theme_bw() +
theme(legend.position='none', text=element_text(size=18))
plot(densitt(x$`412.5`))
plot(density(x$`412.5`))
plot(density(x$`442.5`))
plot(density(x$`490`))
plot(density(x$`510`))
plot(density(x$`560`))
plot(density(x$`620`))
plot(density(x$`665`))
plot(density(x$`681`))
plot(density(x$`681.25`))
plot(density(x$`708`))
plot(density(x$`708.75`))
lines(density(X[,1]))
lines(density(x[,1]))
hist(x[,9])
lines(density(x[,9]))
qqnorm(x[,9],pch=19)
qqline(x[,9])
qqnorm(x[,1],pch=19)
qqline(x[,1])
scatter(x[,1],x[,2])
plot(x[,1],x[,2])
View(Nechad2015)
cbind(SampleID=Nechad2015$SAMPLE.ID, x) %>%
melt(., id='SampleID')
require(reshape2)
cbind(SampleID=Nechad2015$SAMPLE.ID, x) %>%
melt(., id='SampleID')
cbind(SampleID=Nechad2015$SAMPLE.ID, x) %>%
melt(., id='SampleID') %>%
ggplot(data=.,aes(x=value)) +
geom_density() +
facet_wrap(~variable)
FD <- FuzzifierDetermination(x, wv, stand=F)
(FD$m.used)
nb <- 13
set.seed(54321)
result <- FCM.new(FD, nb, fast.mode = T)
data.frame(stname=seq(1,nrow(x)),
cluster=result$res.FCM$cluster %>% as.character()) %>%
cbind(., FD$x) %>%
reshape2::melt(., id=c('stname','cluster')) %>% .level_to_variable() %>%
ggplot(.) +
geom_line(aes(x=variable,y=value,group=stname,color=cluster)) +
facet_wrap(~cluster, scales='free_y')
data.frame(stname=seq(1,nrow(x)),
cluster=result$res.FCM$cluster %>% as.character()) %>%
cbind(., FD$x.stand) %>%
reshape2::melt(., id=c('stname','cluster')) %>% .level_to_variable() %>%
ggplot(.) +
geom_line(aes(x=variable,y=value,group=stname,color=cluster)) +
facet_wrap(~cluster, scales='free_y')
p.list <- plot_spec(result)
p.list$p.cluster.spec
Nechad2015$cluster <- result$res.FCM$cluster %>% as.character
tmp <- data.frame(cluster=Nechad2015$cluster,Chla=Nechad2015$Chla)
tmp$Chla[tmp$Chla >= 999] <- NA
tmp %<>% na.omit()
tmp$cluster <- reorder(tmp$cluster, tmp$Chla, mean)
ggplot(tmp,aes(x=cluster,y=Chla,fill=cluster)) +
geom_boxplot() +
scale_y_log10()
View(result)
result[["FD"]][["x"]]
result[["FD"]][["x"]] %>% colnames()
result[["FD"]][["x"]] %>% colnames() %>% as.numeric
Rrs_clusters.default
result$res.FCM$v
result_ <- apply_FCM_m(result$FD$x,
wavelength=result$FD$x %>% colnames %>% as.numeric,
Rrs_clusters=result$res.FCM$v,
stand=F,
default.cluster=F,
m_used=result$FD$m.used,
option.plot=T)
result_ <- apply_FCM_m(Rrs=result$FD$x,
wavelength=result$FD$x %>% colnames %>% as.numeric,
Rrs_clusters=result$res.FCM$v,
stand=F,
default.cluster=F,
m_used=result$FD$m.used,
option.plot=T)
result$FD$x
result$FD$x %>% plot_spec_from_df()
result$FD$x %>% colnames %>% as.numeric
result$res.FCM$v
result$FD$m.used
apply_FCM_m(Rrs=result$FD$x,
wavelength=result$FD$x %>% colnames %>% as.numeric,
Rrs_clusters=result$res.FCM$v,
stand=F,
default.cluster=F,
m_used=result$FD$m.used,
option.plot=T)
result_ <- apply_FCM_m(Rrs=result$FD$x,
wavelength=result$FD$x %>% colnames %>% as.numeric,
Rrs_clusters=result$res.FCM$v,
stand=F,
default.cluster=F,
m_used=result$FD$m.used,
option.plot=T)
library(FCMm)
library(FCMm)
detach("package:FCMm", unload = TRUE)
library(FCMm)
detach("package:FCMm", unload = TRUE)
library(FCMm)
result_ <- apply_FCM_m(Rrs=result$FD$x,
wavelength=result$FD$x %>% colnames %>% as.numeric,
Rrs_clusters=result$res.FCM$v,
stand=F,
default.cluster=F,
m_used=result$FD$m.used,
option.plot=T)
result$FD$x %>% class
result_ <- apply_FCM_m(Rrs=result$FD$x %>% as.data.frame,
wavelength=result$FD$x %>% colnames %>% as.numeric,
Rrs_clusters=result$res.FCM$v %>% as.data.frame,
stand=F,
default.cluster=F,
m_used=result$FD$m.used,
option.plot=T)
result_$p.group.facet
table(result_$cluster, result$res.FCM$cluster)
result$FD$x %>% is.data.frame
result$FD$x %>% is.na.data.frame
result$FD$x %>% colnames %>% as.numeric %>% is.numeric
devtools::document()
devtools::document()
devtools::document()
devtools::document
devtools::document()
roxygen2::roxygenise()
SRF_simulate(Rrs,select_sensor="All",output_wavelength="MED", save_as_csv=FALSE, na.rm=TRUE, wv_as_column=TRUE)
devtools::document()
build_site()
librry(devtools)
library(devtools)
build_site()
library(FCMm)

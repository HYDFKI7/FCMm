% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Image_application.R
\name{apply_to_image}
\alias{apply_to_image}
\title{Apply FCM_m to raster data}
\usage{
apply_to_image(input, res,
  output_image=TRUE, output_resultpng=FALSE, output_imRrs.n=FALSE,
  Chla_est=FALSE,
  title.name = NULL, png_scale=50,
  fn_memb="output_membership",
  fn_cluster="output_cluster",
  fn_imRrs.n='output_imRrs_normalized',
  fn_truecolorpng='output_truecolor',
  fn_Chla = 'output_Chla',
  output_format='GTiff')
}
\arguments{
\item{input}{A \strong{raster} or a \strong{character} linking
to the raster file on the disk.}

\item{res}{A required list that used for clustering the image data including:
\itemize{
  \item \strong{FD}  The results from function \code{FuzzifierDetermination}
    providing wavelength
  \item \strong{K}  Cluster number
  \item \strong{res.FCM}  Cluster center and used fuzzifier value.
}
For the convenience, function \link{generate_param} supports to quickly
  generate this \code{list}. See more in examples.}

\item{output_image}{Logical, whether to produce image files}

\item{output_resultpng}{Logical, whether to produce png files}

\item{output_imRrs.n}{Logical, whether to produce normalized Rrs files}

\item{Chla_est}{Logical, whether to estimate Chla concentration}

\item{title.name}{Character, the title name of ggplot for plotting}

\item{png_scale}{Numeric, scale of png}

\item{fn_memb}{A string, filename of membership raster file}

\item{fn_cluster}{A string, filename of cluster raster file}

\item{fn_imRrs.n}{A string, filename of normalized Rrs raster file}

\item{fn_truecolorpng}{A string, file name of truecolor png}

\item{fn_Chla}{A string, file name of estimated Chla raster file}

\item{output_format}{A string, the format of raster file, default as \code{GTiff}.
See more in \code{\link[raster:writeRaster]{writeRaster}}}
}
\value{
A \code{list()} of all results and several inputs:
  \itemize{
    \item \strong{input}  What we input character link to image file or raster object
    \item \strong{res}  Condition input of apply_to_image
    \item \strong{raster.memb}  Raster object of membership value
    \item \strong{raster.cluster}  Raster object of cluster
    \item \strong{p.memb}  A ggplot list of membership value map
    \item \strong{p.cluster}  A ggplot list of cluster map
    \item \strong{p.truecolor} A ggplot list of truecolor map
    \item \strong{p.Chla}  A ggplot list of Chla map
    \item \strong{imdf}  Data.frame of raw Rrs including xy coordinates
    \item \strong{imRrs.raw}  Data.frame of raw Rrs
    \item \strong{imRrs.n}  Data.frame of normalized Rrs
    \item \strong{res.FCM}  List of FCM.new result
    \item \strong{res.Chla}  Data.frame includes the template and final Chla estimation results
  }
}
\description{
This function could apply the defined water cluster to corrected image files.
  Should run \code{generate_param()} to generate a \code{res} list as an input
  of function \code{apply_to_image}
}
\details{
The section FCM running used the subset of default Rrs clusters.
  Please see the section \strong{Part II: New coming raster data} by running \code{vignette('Builtin_centrodis')}
  if have not known how to do in that situation.
  
  Also, if it is your first time to get the image data into \strong{R}, you could
  load the raster data by typing \code{raster::brick(filename)} which filename
  is the path of your data such as '/data/Test.dat' or 'E://data//Test.tiff' or so.
}
\examples{
\dontrun{
library(FCMm)
data("OLCI_TH")
data("Bi_clusters")
res <- generate_param(c(413,443,490,510,560,620,665,674,709,754,865,885))
im_result <- apply_to_image(input=OLCI_TH, res=res,
  title.name="Test_image", Chla_est=TRUE, output_image=FALSE)
}
  
}
\references{
Bi S, Li Y, Xu J, et al. Optical classification of inland waters based on
  an improved Fuzzy C-Means method[J]. Optics Express, 2019, 27(24): 34838-34856.
}
\seealso{
Other Fuzzy cluster functions: 
\code{\link{FCM.new}()},
\code{\link{FuzzifierDetermination}()},
\code{\link{apply_FCM_m}()},
\code{\link{generate_param}()},
\code{\link{plot_spec_from_df}()}
}
\concept{Fuzzy cluster functions}

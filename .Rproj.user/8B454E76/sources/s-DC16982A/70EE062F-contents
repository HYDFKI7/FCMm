---
title: "The application of FCMm to imagery data"
author: "Shun Bi"
date: "`r Sys.Date()`"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{The application of FCMm to imagery data}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r setup, include = FALSE}
knitr::opts_chunk$set(collapse = TRUE, comment = "#>",
                      fig.align='center')
```

# Lists of vignettes showing how to use FCMm

Dear users, the four vignettes of `FCMm` were provided in this package to demonstrate the usage and application to obtain the cluster number, to train the user-defined data set, to apply the default FCMm to new data (such as Chla concentration estimation), and to the imagery data.

Here are the step-by-step demos:

 - [Demo_1: How to determine the cluster number?](./doc/Cluster_number_determination.html)
 - [Demo_2: How to train the fuzzy cluster?](./doc/Fuzzy_cluster_training.html)
 - [Demo_3: How to apply the default FCMm to new data?](./doc/New_Data_Running_FCMm.html)
 - [**Demo_4: The application of FCMm to imagery data.**](./doc/Raster_Running_FCMm.html)

# Preparing the data set

This demo shows how to apply `FCMm` to raster data sets if users just want to run it for imagery application by the default cluster spectra and fuzzifier. The required data sets are `OLCI_TH` and `Bi_clusters`. The former is a dataset with atmospherically corrected OLCI rasters of inland waters that the AC method was demonstrated in Liu *et al.* (2015) (see more details about `OLCI_TH` by typing `help(OLCI_TH)`). The latter one is the seven water cluster spectra which trained by FCM-m method (see more details in Bi *et al.* (2019))

**Note_1**: Have to know that `OLCI_TH` is **ONLY** for the testing of `FCMm` in this package. Therefore, if you want to use this dataset to your own research, you should contact us to ask for the permit at first via bishun1994@foxmail or liyunmei@njnu.edu.cn. Hope you can understand.

**Note_2**: we also need package `tidyverse` to string and data processing and package `raster` to process the raster data (important). This vignette also shows how to process images in `R` by `raster` or so.

**Note_3**: The section `FCM running` used the subset of default Rrs clusters. Please see the  section `One more thing` in vignettes `New_Data_Running_FCMm` if have not known how to do in that situation. Hope you have a good day.

## Dataframe process

The `OLCI_TH` is a `RasterBrick` of package `raster`. For running in `FCMm`, this `RasterBrick` should be converted as `ImageDataframe` so called as `imdf`.

```{r message=FALSE, warning=FALSE}
rm(list=ls())
library(FCMm)
library(tidyverse)
data("OLCI_TH")
data("Bi_clusters")

class(OLCI_TH)

# convert RasterBrick to imdf with NA value removed and xy coordinates recorded
imdf <- raster::as.data.frame(OLCI_TH, na.rm=T, xy=TRUE)
names(imdf)[c(-1,-2)] <- c(412.5,442.5,490,510,
                           560,620,665,673.75,
                           708.75,753.75,865,885)
```

## Data set plot

Function `plot_spec_from_df` suppports a quick look about the spectral dataframe. Just type `help(plot_spec_from_df)` to see more details.

**Note**: The input of `plot_spec_from_df` should be a matrix or data.frame with colnames that could be transformed to the numeric --- as the x-axis of the plot. Since the return of `plot_spec_from_df` is a `ggplot` list, you could modify or add it for your own purpose (such as add labs or themes).

```{r fig.height=4, fig.width=6}
set.seed(54321)
sample_n(imdf[,c(-1,-2)],50) %>% 
  plot_spec_from_df(.) + 
  labs(x='Wavelength (nm)',y=expression(Rrs~(sr^-1))) + 
  theme_bw() + 
  theme(legend.position='none', text=element_text(size=18))
```

A-ha! The performance of AC is not bad.

# FCM running

## Clustering the raster and Chla estimation

Function `apply_to_image` provides many parameters for users to decide the process for their desired results. You can see more details by typing `help(apply_to_image)`.

**Note**: The process might take a long time which depends on your local machine.

```{r message=FALSE, warning=FALSE, fig.height=4, fig.width=6}
generate_param <- function(wl){
  w <- (wavelength.default %in% wl)
  wavelength <- wavelength.default[w]
  Rrs_clusters <- Rrs_clusters.default[,w]
  # generate the required res
  res <- list()
  res$FD$wv <- wavelength
  res$K <- nrow(Rrs_clusters)
  res$res.FCM <- list(v=Rrs_clusters,m=1.36)
  return(res)
}

res <- generate_param(c(413,443,490,510,560,620,665,674,709,754,865,885))


im_result <- apply_to_image(input=OLCI_TH, res=res, title.name="Test_image",
                            Chla_est=T, output_image=F)
summary(im_result)
```

`im_result` list contains several result by `apply_to_image`:

 - *input*: what we input character link to image file or `raster` object
 - *res*: condition input of `apply_to_image`
 - *raster.memb*: raster object of membership value
 - *raster.cluster*: raster object of cluster
 - *p.memb*: ggplot list of membership value map
 - *p.cluster*: ggplot list of cluster map
 - *p.truecolor*: ggplot list of truecolor map
 - *p.Chla*: ggplot list of Chla map
 - *imdf*: data.frame of raw Rrs including xy coordinates
 - *imRrs.raw*: data.frame of raw Rrs
 - *imRrs.n*: data.frame of normalized Rrs
 - *res.FCM*: list of `FCM.new` result
 - *res.Chla*: data.frame includes the template and final Chla estimation results

